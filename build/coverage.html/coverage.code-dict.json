{"/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/test.js":"/* istanbul instrument in package npmtest_gulp_htmlbuild */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/lib.npmtest_gulp_htmlbuild.js":"/* istanbul instrument in package npmtest_gulp_htmlbuild */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_htmlbuild = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_htmlbuild = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-htmlbuild && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_htmlbuild */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_htmlbuild\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_htmlbuild.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_htmlbuild.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_htmlbuild.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_htmlbuild.__dirname + '/lib.npmtest_gulp_htmlbuild.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/index.js":"'use strict';\n\nvar es          = require('event-stream'),\n    gutil       = require('gulp-util'),\n    PluginError = gutil.PluginError,\n    parser      = require('./parser'),\n    builder     = require('./builder');\n\nvar PLUGIN_NAME = require('../package').name;\n\n\nmodule.exports = function (config) {\n\n  function htmlbuildFile(file, callback) {\n\n    if (file.isNull()) {\n      return callback(null, file); // pass along\n    }\n    \n    if (file.isStream()) {\n      return callback(new PluginError(PLUGIN_NAME, 'Streaming not supported', {\n        fileName: file.path\n      }));\n    }\n    \n    parser.parse(file)\n      .pipe(builder.build(config))\n      .pipe(es.wait(function (error, content) {\n        file.contents = new Buffer(content);\n        callback(error, file);\n      }));\n  }\n\n  return es.map(htmlbuildFile);\n};\n\nmodule.exports.preprocess = require('./preprocess');\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/parser.js":"'use strict';\n\nvar gutil = require('gulp-util'),\n    Block = require('./Block'),\n    PassThrough = require('stream').PassThrough,\n    buffer = require('pause-stream');\n\nvar PLUGIN_NAME = require('../package').name;\n\nvar tokenTypes = {\n  BLOCK_START: 'block-start',\n  BLOCK_END  : 'block-end',\n  LINE       : 'line'\n};\n\n\nfunction tokenize(line) {\n  var token = {\n    line  : line,\n    type  : null,\n    target: null,\n    args  : null\n  };\n  \n  var blockStartMatch = /^(\\s*)<!--\\s*htmlbuild:([a-zA-Z]*)(.+?)\\s*-->/.exec(line);\n  \n  if (blockStartMatch !== null) {\n    token.type   = tokenTypes.BLOCK_START;\n    token.indent = blockStartMatch[1];\n    token.target = blockStartMatch[2];\n    token.args = blockStartMatch[3] ? blockStartMatch[3].trim().split(' ') : null;\n  } else if (/<!--\\s*endbuild\\s*-->/.test(line)) {\n    token.type = tokenTypes.BLOCK_END;\n  } else {\n    token.type = tokenTypes.LINE;\n  }\n  \n  return token;\n}\n\n\nfunction parse(file) {\n  \n  var result = buffer();\n  \n  setImmediate(function () {\n  \n    function makeError(lineNumber, msg) {\n      return new gutil.PluginError(PLUGIN_NAME, msg, {\n        showStack: false,\n        lineNumber: lineNumber,\n        fileName: file.path\n      });\n    }\n\n    var lines   = String(file.contents).split('\\n'),\n        tokens  = lines.map(tokenize),\n        inBlock = false,\n        error   = null;\n\n    var currentBlock = new Block({\n      lineNumber: 1\n    });\n\n    for (var i = 0; i < tokens.length; i++) {\n      var lineNumber = i + 1,\n          token      = tokens[i];\n\n      if (token.type === tokenTypes.BLOCK_START) {\n        if (inBlock) {\n          error = makeError(lineNumber, 'Blocks can\\'t be nested');\n          return result.emit('error', error);\n        } else {\n          inBlock = true;\n        }\n      }\n\n      if (token.type === tokenTypes.BLOCK_END) {\n        if (inBlock) {\n          inBlock = false;\n        } else {\n          error = makeError(lineNumber, 'Block has no start');\n          return result.emit('error', error);\n        }\n      }\n\n      var switchBlocks = (\n        token.type === tokenTypes.BLOCK_START ||\n        token.type === tokenTypes.BLOCK_END\n      );\n\n      if (switchBlocks) {\n        result.write(currentBlock);\n        currentBlock = new Block({\n          line      : token.line,\n          target    : token.target,\n          indent    : token.indent,\n          args      : token.args,\n          lineNumber: lineNumber\n        });\n      } else {\n        currentBlock.lines.push(token.line);\n      }\n    }\n\n    if (inBlock) {\n      error = makeError(currentBlock.lineNumber, 'Unclosed block');\n      return result.emit('error', error);\n    }\n\n    result.end(currentBlock);\n  });\n  \n  return result;\n}\n\n\nmodule.exports = {\n  _tokens: tokenTypes,\n  _tokenize: tokenize,\n  parse: parse\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/Block.js":"'use strict';\n\nfunction Block(config) {\n  config = config || {};\n  \n  this.lines      = config.lines || [];\n  this.target     = config.target || null;\n  this.indent     = config.indent || '';\n  this.lineNumber = config.lineNumber;\n  this.args       = config.args || [];\n}\n\nmodule.exports = Block;\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/builder.js":"'use strict';\n\nvar es = require('event-stream'),\n    Duplex = require('stream').Duplex,\n    flatten = require('./flatten'),\n    util = require('util');\n\n\n\n\nfunction QueueStream() {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  \n  this._flowing = false;\n  this._queue = [];\n  \n  this.on('finish', function () {\n    this._enqueue(null);\n  }.bind(this));\n}\nutil.inherits(QueueStream, Duplex);\n\nQueueStream.prototype._read = function () {\n  this._flowing = true;\n  this._streamData();\n};\n\nQueueStream.prototype._write = function (chunk, enc, callback) {\n  this._enqueue(chunk);\n  callback(null);\n};\n\nQueueStream.prototype._enqueue = function (data) {\n  this._queue.push(data);\n  if (this._flowing) {\n    this._streamData();\n  }\n};\n\nQueueStream.prototype._streamData = function () {\n  while (this._flowing && this._queue.length > 0) {\n    var data = this._queue.shift();\n    this._flowing = this.push(data);\n  }\n};\n\n\n\nfunction BlockStream(block) {\n  Duplex.call(this, {\n    objectMode: true,\n    allowHalfOpen: true\n  });\n  \n  this.indent = block.indent;\n  this.args = block.args;\n  \n  this._lines = block.lines.map(function (line) {\n    return line;\n  });\n  \n  this.result = new QueueStream();\n  this.on('finish', function () {\n    this.result.end();\n  }.bind(this));\n}\nutil.inherits(BlockStream, Duplex);\n\nBlockStream.prototype._read = function () {\n  var accepts = true;\n  while (accepts && this._lines.length > 0) {\n    var line = this._lines.shift();\n    accepts = this.push(line);\n  }\n  \n  if (this._lines.length <= 0) {\n    this.push(null);\n  }\n};\n\nBlockStream.prototype._write = function (chunk, enc, callback) {\n  this.result.write(chunk);\n  callback(null);\n};\n\n\n\nfunction build(config) {\n  config = config || {};\n  \n  var buildStream = es.through(function write(block) {\n    var buildFn = block.target && config[block.target],\n        blockStream = new BlockStream(block);\n    \n    if (buildFn) {\n      buildFn(blockStream);\n    } else {\n      blockStream.pipe(blockStream);\n    }\n    \n    this.queue(blockStream.result);\n  });\n  \n  return es.pipeline(\n    buildStream,\n    flatten(),\n    es.join('\\n')\n  );\n}\n\n\nmodule.exports = {\n  build: build\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/flatten.js":"'use strict';\n\nvar util = require('util'),\n    Transform = require('stream').Transform;\n\n\nfunction FlattenStream() {\n  Transform.call(this, {\n    objectMode: true\n  });\n  \n  this._queue = [];\n  this._streaming = false;\n}\nutil.inherits(FlattenStream, Transform);\n\n\nFlattenStream.prototype._transform = function (stream, enc, callback) {\n  \n  stream.on('error', this.emit.bind(this, 'error'));\n  this._queue.push({\n    stream: stream,\n    cb: callback\n  });\n  if (!this._streaming) {\n    this._processNextStream();\n  }\n};\n\nFlattenStream.prototype._flush = function (callback) {\n  this._queue.push({\n    stream: null,\n    cb: callback\n  });\n  if (!this._streaming) {\n    this._processNextStream();\n  }\n};\n\nFlattenStream.prototype._processNextStream = function () {\n  if (this._queue.length <= 0) {\n    return;\n  }\n  \n  var next = this._queue.shift();\n  if (next.stream === null) {\n    this.push(null);\n    next.cb(null);\n  } else {\n    this._streaming = true;\n    next.stream\n      .on('data', function (data) {\n        this.push(data);\n      }.bind(this))\n      .on('end', function () {\n        this._streaming = false;\n        next.cb(null);\n        this._processNextStream();\n      }.bind(this));\n  }\n};\n\n\nmodule.exports = function () {\n  return new FlattenStream();\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/preprocess/index.js":"'use strict';\n\nmodule.exports = {\n  js: require('./js'),\n  css: require('./css')\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/preprocess/js.js":"'use strict';\n\nvar es = require('event-stream'),\n    preprocessUtil = require('./preprocessUtil'),\n    util = require('util');\n\nmodule.exports = function (buildFn) {\n\n  function extractScript(line) {\n    var matched = /(\\s*)<script.+src=['\"]([^\"']+)[\"']/.exec(line);\n    if (matched) {\n      return preprocessUtil.pathFromUrl(matched[2]);\n    }\n  }\n\n  return function (block) {\n\n    function templateScript(path) {\n      var template = block.indent + '<script src=\"%s\"></script>';\n      return util.format(template, path);\n    }\n\n\n    var extractSrc = es.mapSync(extractScript),\n        templateSrc = es.mapSync(templateScript);\n\n\n    block.pipe(extractSrc);\n    templateSrc.pipe(block);\n\n    buildFn(es.duplex(templateSrc, extractSrc));\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/preprocess/preprocessUtil.js":"'use strict';\n\nvar urlUtil = require('url');\n\nfunction pathFromUrl(url) {\n  var parsed = urlUtil.parse(url);\n  return urlUtil.format({\n    protocol: parsed.protocol,\n    hostname: parsed.hostname,\n    port: parsed.port,\n    pathname: parsed.pathname\n  });\n}\n\nexports.pathFromUrl = pathFromUrl;\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/lib/preprocess/css.js":"'use strict';\n\nvar es = require('event-stream'),\n    preprocessUtil = require('./preprocessUtil'),\n    util = require('util');\n\nmodule.exports = function (buildFn) {\n\n  function extractCss(line) {\n    var matched = /(\\s*)<link.+href=['\"]([^\"']+)[\"']/.exec(line);\n    if (matched) {\n      return preprocessUtil.pathFromUrl(matched[2]);\n    }\n  }\n\n  return function (block) {\n\n    function templateCss(path) {\n      var template = block.indent + '<link rel=\"stylesheet\" href=\"%s\"/>';\n      return util.format(template, path);\n    }\n\n\n    var extractCssStream = es.mapSync(extractCss),\n        templateCssStream = es.mapSync(templateCss);\n\n\n    block.pipe(extractCssStream);\n    templateCssStream.pipe(block);\n\n    buildFn(es.duplex(templateCssStream, extractCssStream));\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-htmlbuild/node_modules/gulp-htmlbuild/gulpfile.js":"'use strict';\n\nvar gulp  = require('gulp'),\n    plugins = require('gulp-load-plugins')();\n\n\ngulp.task('mocha', function () {\n  \n  gulp.src('./test/**/*.spec.js', {read: false})\n    .pipe(plugins.mocha({\n      reporter: 'spec'\n    }))\n    .on('error', function (error) {\n      console.log(error.name, error.message);\n    });\n  \n});\n\n\ngulp.task('mocha-watch', ['mocha'], function () {\n  \n  gulp.watch([\n    './lib/**/*.js',\n    './test/**/*.spec.js'\n  ], ['mocha']);\n  \n});\n"}